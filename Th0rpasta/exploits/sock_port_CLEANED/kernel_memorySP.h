//
//  kernel_memory.h
//  sock_port
//


#ifndef kernel_memorySP_h
#define kernel_memorySP_h

#include <stdio.h>
#include <mach/mach.h>
#include "offsetss3.h"
//extern uint64_t basefromkernelmemory;
//extern uint64_t slidefromkernelmemory;
extern uint64_t current_task_s3_s3;
extern u_int64_t itk_space_s3;
extern u_int64_t itk_space_size_s3;
extern u_int64_t itk_space_istable_s3;
extern u_int64_t itk_space_vm_s3;
extern u_int64_t itk_space_port_s3;
extern uint64_t ourprocFinal_s3;
extern uint64_t kernprocFinal_s3;
extern uint64_t iosruc_port_OOB1;
extern uint64_t iosruc_addr_OOB1;
extern uint64_t iosruc_vtab_OOB1;
extern uint32_t newClientSP_s31;

extern uint64_t current_proc_OOB;
extern uint64_t current_task_OOB;
void untar2(FILE *a, const char *path);

kern_return_t mach_vm_allocate(vm_map_t target, mach_vm_address_t *address, mach_vm_size_t size, int flags);
kern_return_t mach_vm_read_overwrite(vm_map_t target_task, mach_vm_address_t address, mach_vm_size_t size, mach_vm_address_t data, mach_vm_size_t *outsize);
kern_return_t mach_vm_write(vm_map_t target_task, mach_vm_address_t address, vm_offset_t data, mach_msg_type_number_t dataCnt);
kern_return_t mach_vm_deallocate(vm_map_t target, mach_vm_address_t address, mach_vm_size_t size);;
kern_return_t mach_vm_read(vm_map_t target_task, mach_vm_address_t address, mach_vm_size_t size, vm_offset_t *data, mach_msg_type_number_t *dataCnt);
void init_kernel_memorySP(mach_port_t tfp0);


size_t kreadSP(uint64_t where, void *p, size_t size);
uint32_t rk32SP(uint64_t where);
uint64_t rk64SP(uint64_t where);

size_t kwriteSP(uint64_t where, const void *p, size_t size);
void wk32SP(uint64_t where, uint32_t what);
void wk64SP(uint64_t where, uint64_t what);

void kfreeSP(mach_vm_address_t address, vm_size_t size);
uint64_t kallocSP(vm_size_t size);

uint64_t find_port_SP(mach_port_name_t port, uint64_t task_self);

#endif /* kernel_memory_h */
